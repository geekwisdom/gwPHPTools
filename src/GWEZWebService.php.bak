<?php
/* *************************************************************************************
' Script Name: GWEZWebService
' **************************************************************************************
' @(#)    Purpose:
' @(#)    This is a shared component available to all PHP applications. It allows an easy 
' @(#)    ability to serve a php class OR stored procedure as a web service
' @(#)    Simple Setup works with XML and JSON formats
' **************************************************************************************
'  Written By: Brad Detchevery
			   2274 RTE 640, Hanwell NB
'
' Created:     2019-11-03 - Initial Architecture
' 
' **************************************************************************************
'This class defines those protected methods common to all extended children
' **************************************************************************************/
namespace org\geekwisdom;
require_once __DIR__ . '/../../../autoload.php'; // Autoload files using
use \org\geekwisdom\GWDataIOInterface;
use \org\geekwisdom\GWDataTable;
use \org\geekwisdom\GWDataRow;
use \org\geekwisdom\GWSettings;
use \org\geekwisdom\GWDBConnection;
use \SimpleXMLElement;
use \DOMDocument;
use \PDO;
use \ReflectionMethod;
use \ReflectionClass;
class GWEZWebService 
{
protected $ServiceFile;
protected $ServiceName;
protected $UserName;
protected $fault403;
function __construct ($servicename="",$filepath="/tmp/",$_username="")
{
$this->ServiceName= $servicename;
$this->UserName = $_username;
$this->ServiceFile = $filepath . $servicename . ".xml";
$this->fault403 = new GWDataTable("","fault");
$newrow = new GWDataRow();
$newrow->set ("code","Server");
$newrow->set ("faultstring","403 Access Denied");
$this->fault403->Add($newrow);
}

private function showError($faultstring,$detail,$format)
{
$errormsg = new GWDataTable("","fault");
$newrow = new GWDataRow();
$newrow->set ("code","Server");
$newrow->set ("faultstring",$faultstring);
if ($detail !="") $newrow->set ("detail",$detail);
$errormsg->Add($newrow);
if ($format == "XML") return $errormsg->toXML();
if ($format == "JSON") return $errormsg->toJSON();
return $errormsg;
}

function Fulfill($Operation,$Params,$format) { //actual "process function' 
//given a mthod and parameters return the //result in $format 

if ($Operation == "")
{
return $this->showError("404 Not Found","Missing Operation: " . $Operation,$format);
}


$FinalOutput=""; $WebServiceConfig = new GWDataTable(); 
$GWServiceResults = new GWDataTable(); 
if (!(file_exists($this->ServiceFile)))
 {
return $this->showError("404 Not Found","No such service available: " . $this->ServiceName,$format);
 }
$GWServiceFile=file_get_contents($this->ServiceFile); 
$WebServiceConfig->loadXml($GWServiceFile); 
//$FoundRows=$WebServiceConfig->find_row("[ OperationName _EQ_ \"" . $Operation . "\" ]");
$FoundRows=$WebServiceConfig->search("[ OperationName _EQ_ \"" . $Operation . "\" ]");
$OpType="";
$OpSource="";
$UserName="";
if ($FoundRows->length()) == 0)
{
return $this->showError("404 Not Found","No such operation available: " . $Operation,$format);
}

if (count($FoundRows) > 0)
	 {
    $FoundRow = $WebServiceConfig->getRow($FoundRows[0]);
    $OpType=$FoundRow->get("OperationType");
    $OpSource=$FoundRow->get("OperationSource");
    $AuthEnabled = $FoundRow->has_column("AllowedUsers");
    if ($AuthEnabled)
	{
	   $UserAuthNames=$FoundRow->get("AllowedUsers");

        if ($this->UserName == "")
		{
		if ($format == "XML") return $this->fault403->toXML();
		if ($format == "JSON") return $this->fault403->toJSON();
		return $this->fault403;
		}
	$has_semi=strpos($UserAuthNames,";");
	$AllowedUsers = Array();
	if ($has_semi === false)
 		{
		$AllowedUsers[0]=$UserAuthNames;
		}
	else
		{
		$AllowedUsers=explode(";",$UserAuthNames);
		}

	$AccessGranted=false;
	for ($i=0;$i<count($AllowedUsers);$i++)
	  {
	   if (strcasecmp($AllowedUsers[$i],$this->UserName) == 0) $AccessGranted=true;
 	  }
	if ($AccessGranted == false) 
		{
		if ($format == "XML") return $this->fault403->toXML();
		if ($format == "JSON") return $this->fault403->toJSON();
		return $this->fault403;
		}
	}

   $isStoredProcedure = strpos($OpSource,".class.php");
	if ($isStoredProcedure !== false)
		{
		$PArray=Array();
		$MethodData=Array();
		$testParse = $this->parseMethod($OpType,$MethodData,$PArray);
		$ECount = count($PArray);
		$ACount = count($Params);
		if ($ECount != $ACount)	
			{
			return $this->showError("500 Server Error","Incorrect Parameters for Operation " . $Operation,$format);
			}
		if ($testParse === false) 
			{
			//return a FAULT error invalid parse of OpData
			return $this->showError("500 Server Error","Exposed Service formatting error:  " . $Operation,$format);
			}
		require_once($OpSource);
		$ClassName = $MethodData["MethodParts"];
		$MethodName = $MethodData["MethodName"];
		$rc="";
		try
		{
		$rc = new ReflectionClass($ClassName);
		}	
		catch (Exception $e)
			{
		return $this->showError("500 ERROR","No such Class: " . $ClassName,$format);
			}
		if (!($rc->hasMethod($MethodName)))
		{
		return $this->showError("500 ERROR","No such Method: " . $MethodName,$format);
		}

		$classNameBracket=$ClassName . "()";
		if (strpos ($ClassName,".") == false) $ns="\\" . $ClassName;
		else $ns=$ClassName;
		$obj = new $ns;
		//TODO: Should arrange the paramstesr (A=1,B=2, such that they
//		are orded in same format if possible)
		$NewParams = $this->orderParams($Params);
		try {
		$result = call_user_func_array(array($obj, $MethodName),$NewParams);
		}
		catch (Exception $e)
		{
		return $this->showError("500 ERROR",$e->getMessage(),$format);
		}
		if (is_object($result))  $retval = $result;
		else
		{
		 $retval = new GWDataTable("","Results");
		 $newrow = new GWDataRow();
		$newrow->set ("Return",$result);
		$retval->Add($newrow);
		}
                if ($format == "XML") return $retval->toXML();
               if ($format == "JSON") return $retval->toJSON();
		return $result;
		}
	else
		{
		//execute stored procedure
		$PD = new GWDBConnection($OpSource);
		$stmt= $PD->prepare($OpType);
		$cnt=1;
		$NewParams=$this->orderParams($Params);
//		foreach ($NewParams as $key => $val) 
		for ($i=0;$i<count($NewParams);$i++)
			{
			$stmt->bindParam($cnt,$NewParams[$i]);
			$cnt++;
			}
		$stmt->execute();
		$rows=$stmt->fetchAll(PDO::FETCH_ASSOC);
		
		if (count($rows) > 0)
		{
		$retval = new GWDataTable("","Results");
		$retval->readList($rows);
		if ($format == "XML") return $retval->toXML();
		if ($format == "JSON") return $retval->toJSON();
		return $retval;
		}
}
    echo "Found it!\n";
    echo "MethodType = $OpType\n";
    echo "MethodSource = $OpSource\n";
    echo "UserName = $UserName\n";

 }


}

private function orderParams($Params)
{
		$NewParams=Array();
		//Split out any equals
		for ($i=0;$i<count($Params);$i++)
			{
			$p = strpos($Params[$i],"=");
			if ($p !== false)
				{
				$parts=explode("=",$Params[$i]);
				$NewParams[$i]=$parts[1];
				}
			else $NewParams[$i] = $Params[$i];
			}
return $NewParams;
}

private function parseMethod($MethodData,&$methods,&$params)
{
//parse Method data eg GWSettings.MySettings.getName(Param1,Param2)
//should create the 'Prefix GWSettings->MySettings, and the MethodName getname
//and an array of parameter Names (Param1, Param2). Trainling semicolins
//are ignored!
$MethodNaneSide="";
$MethodParamsSide="";
$checkOpenBracket = strpos($MethodData,"(");
$checkClosedBracket = strpos($MethodData,")");

//split method name from parameters
if ($checkOpenBracket !== false)
 {
  if ($checkClosedBracket === false) return false; //parse format error
  if ($checkClosedBracket < $checkOpenBracket) return false; //parse format error
  $MethodNameSide = substr($MethodData,0,$checkOpenBracket);
  $MethodParamsSide =substr($MethodData,$checkOpenBracket);
 }
else
 {
  $MethodNameSide=$MethodData;
  $MethodParamsSide="";
 }

//Split method name

$checkdot = strpos($MethodNameSide,".");
if ($checkdot !== false)
 {
  $gparts = explode(".",$MethodNameSide);
  $last=count($gparts);
  $MethodParts=$gparts[0];
  for ($i=1;$i<$last-1;$i++) $MethodParts = $MethodParts . "->" . $gparts[$i];
  $MethodName=$gparts[$last-1];
  $methods["MethodName"] = $MethodName;
  $methods["MethodParts"] = $MethodParts;
 }
else
 { 
 $methods["MethodName"] = $MethodNameSide;
 $methods["MethodParts"] ="";
	
 }

//split params $Params=Array(); if 
if ($this->getParams($MethodParamsSide,$Params))
 {
 $params=$Params;
 return true;
 }
return false; //parseerror

}


private function getParams($ParamSide,&$Params)
{
//given a function containing a format of "(" and ")" get the parameters
//from the inside useful for both STORED PROCEDURS AND REFLECTION

$checkOpenBracket = strpos($ParamSide,"(");
$checkClosedBracket = strpos($ParamSide,")");

//split method name from parameters
if ($checkOpenBracket !== false)
 {
  $checkClosedBracket = strpos($ParamSide,")");

  if ($checkClosedBracket === false) return false; //parse format error
  if ($checkClosedBracket < $checkOpenBracket) return false; //parse format error
  $ParamData = substr($ParamSide,$checkOpenBracket,$checkClosedBracket-$checkOpenBracket+1);
  $ParamData = str_replace("(","",$ParamData);
  $ParamData = str_replace(")","",$ParamData);
  $ParamData = str_replace(";","",$ParamData);
  $Params=Array();
  $checkcomma = strpos($ParamData,",");
  if ($checkcomma === false) 
    {
   $Params[0] = trim($ParamData);
   return true;
  }
  else
 	{
	$parray=explode(",",$ParamData);
	for ($i=0;$i<count($parray);$i++) $Params[$i]=trim($parray[$i]);
	return true;
	}
  
 }
return false; //format/parse error
}

}
